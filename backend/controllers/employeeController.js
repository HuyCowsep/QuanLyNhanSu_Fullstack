const { Employee, Department, Leave, User } = require('../models');
const { logActivity } = require('../controllers/activityLogController');
const path = require('path');

// L·∫•y danh s√°ch t·∫•t c·∫£ nh√¢n vi√™n
const getAllEmployees = async (req, res) => {
  try {
    const employees = await Employee.find().populate('department', 'name');
    // C·∫≠p nh·∫≠t `leaveDaysPerMonth` cho t·ª´ng nh√¢n vi√™n
    const updatedEmployees = await Promise.all(
      employees.map(async (employee) => {
        const currentMonth = new Date().getMonth() + 1;
        const currentYear = new Date().getFullYear();
        // T√≠nh s·ªë ng√†y ngh·ªâ ƒë√£ duy·ªát trong th√°ng n√†y
        const approvedLeaves = await Leave.find({
          employeeId: employee._id,
          status: 'ƒê√£ duy·ªát',
          startDate: { $gte: new Date(`${currentYear}-${currentMonth}-01`) },
          endDate: { $lt: new Date(`${currentYear}-${currentMonth + 1}-01`) },
        });
        let usedLeaveDays = 0;
        approvedLeaves.forEach((leave) => {
          const start = new Date(leave.startDate);
          const end = new Date(leave.endDate);
          usedLeaveDays += (end - start) / (1000 * 60 * 60 * 24) + 1;
        });
        // `leaveDaysPerMonth` t·ªëi thi·ªÉu l√† 0
        const updatedLeaveDaysPerMonth = Math.max(0, employee.leaveDaysPerMonth - usedLeaveDays);

        return {
          ...employee.toObject(),
          leaveDaysPerMonth: updatedLeaveDaysPerMonth, // ‚úÖ C·∫≠p nh·∫≠t gi√° tr·ªã n√†y
        };
      }),
    );
    res.json(updatedEmployees);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// L·∫•y nh√¢n vi√™n theo ID
const getEmployeeById = async (req, res) => {
  try {
    const { id } = req.params;
    const employee = await Employee.findById(id).populate('department', 'name');
    if (!employee) return res.status(404).json({ message: 'Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i' });
    res.json(employee);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// Th√™m nh√¢n vi√™n m·ªõi
const createEmployee = async (req, res) => {
  try {
    const {
      firstName,
      lastName,
      dateOfBirth,
      gender,
      address,
      email,
      phone,
      department,
      position,
      role,
      salary,
      hireDate,
      avatar,
      leaveDaysPerMonth,
    } = req.body;
    const userId = req.user.id; // L·∫•y ID ng∆∞·ªùi d√πng t·ª´ token ƒë·ªÉ ph·ª•c v·ª• cho c√°i ActivityLog
    // Ki·ªÉm tra email c√≥ t·ªìn t·∫°i ch∆∞a
    const existingEmployee = await Employee.findOne({ email });
    if (existingEmployee) {
      return res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i' });
    }
    // Ki·ªÉm tra ph√≤ng ban c√≥ h·ª£p l·ªá kh√¥ng (n·∫øu c√≥)
    if (department) {
      const dept = await Department.findById(department);
      if (!dept) {
        return res.status(400).json({ message: 'Ph√≤ng ban kh√¥ng t·ªìn t·∫°i' });
      }
    }
    //form nh√¢n vi√™n m·ªõi
    const newEmployee = new Employee({
      firstName,
      lastName,
      dateOfBirth,
      gender,
      address,
      email,
      phone,
      department,
      position,
      salary,
      role,
      hireDate,
      avatar: avatar || 'default.jpg',
      leaveDaysPerMonth: leaveDaysPerMonth || 5, // M·∫∑c ƒë·ªãnh l√† 5 ng√†y ph√©p/th√°ng n·∫øu kh√¥ng truy·ªÅn
    });

    await newEmployee.save();
    // G√°n employeeId v√†o user t∆∞∆°ng ·ª©ng
    await User.findByIdAndUpdate(req.user.id, { employeeId: newEmployee._id });
    //Ghi log l·∫°i
    await logActivity(userId, 'Th√™m nh√¢n vi√™n', 'Employee', newEmployee._id);
    res.status(201).json({ message: 'Th√™m nh√¢n vi√™n th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

//C·∫≠p nh·∫≠t nh√¢n vi√™n
const updateEmployee = async (req, res) => {
  try {
    const { id } = req.params;
    const updates = req.body;
    const userId = req.user.id;

    // Check user c√≥ quy·ªÅn s·ª≠a ƒë√∫ng profile c·ªßa m√¨nh kh√¥ng
    const user = await User.findById(userId);
    if (!user || user.employeeId.toString() !== id) {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n n√†y!' });
    }

    const employee = await Employee.findByIdAndUpdate(id, updates, { new: true }).populate('department', 'name');
    if (!employee) return res.status(404).json({ message: 'Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i' });

    await logActivity(userId, 'C·∫≠p nh·∫≠t nh√¢n vi√™n', 'Employee', id);
    res.json({ message: 'C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n th√†nh c√¥ng', employee });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

//X√≥a nh√¢n vi√™n c·ªßa ADMIN
const deleteEmployee = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id; // L·∫•y ID ng∆∞·ªùi d√πng t·ª´ token ƒë·ªÉ ph·ª•c v·ª• cho c√°i ActivityLog
    const employee = await Employee.findByIdAndDelete(id);
    if (!employee) return res.status(404).json({ message: 'Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i' });
    // Ghi log
    await logActivity(userId, 'X√≥a nh√¢n vi√™n', 'Employee', id);
    res.json({ message: 'X√≥a nh√¢n vi√™n th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

//H√†m t·∫£i l√™n ·∫£nh ƒë·∫°i di·ªán cho nh√¢n vi√™n theo ID
const uploadAvatar = async (req, res) => {
  console.log('üîπ Headers:', req.headers);
  console.log('üîπ Body:', req.body);
  console.log('üîπ File:', req.file);

  try {
    const { id } = req.params;
    if (!req.file) {
      return res.status(400).json({ message: '‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n' });
    }

    const avatarPath = `/uploads/${req.file.filename}`;
    console.log('‚úÖ File ƒë∆∞·ª£c l∆∞u:', avatarPath);

    const employee = await Employee.findByIdAndUpdate(req.params.id, { avatar: avatarPath }, { new: true });
    if (!employee) {
      return res.status(404).json({ message: '‚ö†Ô∏è Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i' });
    }

    res.json({ message: '‚úÖ ·∫¢nh ƒë·∫°i di·ªán ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t', avatar: avatarPath });
  } catch (error) {
    console.error('üî• L·ªói server:', error);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

//C·∫≠p nh·∫≠t l∆∞∆°ng c∆° b·∫£n
const updateEmployeeSalary = async (req, res) => {
  try {
    const { id } = req.params;
    const { salary } = req.body;
    const userId = req.user.id;
    // Ki·ªÉm tra role ADMIN
    const user = await User.findById(userId);
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t l∆∞∆°ng c·ªßa nh√¢n vi√™n n√†y!' });
    }
    // C·∫≠p nh·∫≠t l∆∞∆°ng cho nh√¢n vi√™n
    const employee = await Employee.findByIdAndUpdate(id, { salary }, { new: true });
    if (!employee) {
      return res.status(404).json({ message: 'Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i' });
    }
    // Ki·ªÉm tra n·∫øu salary l√† undefined ho·∫∑c null
    if (salary === undefined || salary === null) {
      return res.status(400).json({ message: 'L∆∞∆°ng kh√¥ng h·ª£p l·ªá' });
    }
    // C·∫≠p nh·∫≠t l∆∞∆°ng
    employee.salary = salary;
    await employee.save();
    // Ghi log ho·∫°t ƒë·ªông
    await logActivity(userId, 'C·∫≠p nh·∫≠t l∆∞∆°ng nh√¢n vi√™n', 'Employee', id);

    res.json({ message: 'C·∫≠p nh·∫≠t l∆∞∆°ng nh√¢n vi√™n th√†nh c√¥ng', employee });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t l∆∞∆°ng nh√¢n vi√™n:', error.message);
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

module.exports = { getAllEmployees, getEmployeeById, createEmployee, updateEmployee, deleteEmployee, uploadAvatar, updateEmployeeSalary };
