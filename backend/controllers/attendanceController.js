const { Attendance, Employee } = require('../models');

// üìå L·∫•y t·∫•t c·∫£ ch·∫•m c√¥ng (Admin)
const getAllAttendances = async (req, res) => {
  try {
    const attendances = await Attendance.aggregate([
      {
        $lookup: {
          from: 'employees',
          localField: 'employeeId',
          foreignField: '_id',
          as: 'employeeInfo',
        },
      },
      { $unwind: { path: '$employeeInfo', preserveNullAndEmptyArrays: true } },
      {
        $lookup: {
          from: 'departments',
          localField: 'employeeInfo.department',
          foreignField: '_id',
          as: 'departmentInfo',
        },
      },
      { $unwind: { path: '$departmentInfo', preserveNullAndEmptyArrays: true } },
      {
        $project: {
          _id: 1,
          date: 1,
          checkInTime: 1,
          checkOutTime: 1,
          status: 1,
          'employeeInfo.firstName': 1,
          'employeeInfo.lastName': 1,
          'departmentInfo.name': 1,
        },
      },
    ]);

    res.json(attendances);
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch ch·∫•m c√¥ng:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
};

// L·∫•y ch·∫•m c√¥ng theo ID nh√¢n vi√™n (Employee)
const getAttendanceByEmployee = async (req, res) => {
  try {
    const { employeeId } = req.params;
    const attendances = await Attendance.find({ employeeId }).sort({ date: -1 });

    res.json(attendances);
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// ƒêi·ªÉm danh ch·∫•m c√¥ng CheckIn(Employee)
const createAttendance = async (req, res) => {
  try {
    const { employeeId, date } = req.body;

    const employee = await Employee.findById(employeeId);
    if (!employee) return res.status(400).json({ message: 'Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i' });

    const existingAttendance = await Attendance.findOne({ employeeId, date });
    if (existingAttendance) return res.status(400).json({ message: 'B·∫°n ƒë√£ ch·∫•m c√¥ng h√¥m nay r·ªìi' });

    const now = new Date();
    const checkInTime = now.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', hour12: false });
    const standardCheckInTime = '08:00';
    const status = checkInTime > standardCheckInTime ? 'ƒêi l√†m mu·ªôn' : 'ƒêi l√†m';

    const newAttendance = new Attendance({ employeeId, date, checkInTime, status });
    await newAttendance.save();

    res.status(201).json({ message: 'Ch·∫•m c√¥ng th√†nh c√¥ng', status, checkInTime });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// ƒêi·ªÉm danh CheckOut (Employee)
const updateAttendance = async (req, res) => {
  try {
    const { id } = req.params;
    const now = new Date();
    const checkOutTime = now.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit', hour12: false });

    const attendance = await Attendance.findByIdAndUpdate(id, { checkOutTime }, { new: true });
    if (!attendance) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ch·∫•m c√¥ng' });

    res.json({ message: 'Ch·∫•m c√¥ng ra th√†nh c√¥ng', checkOutTime });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

// X√≥a ch·∫•m c√¥ng (Admin)
const deleteAttendance = async (req, res) => {
  try {
    const { id } = req.params;
    const attendance = await Attendance.findByIdAndDelete(id);
    if (!attendance) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ch·∫•m c√¥ng' });

    res.json({ message: 'X√≥a ch·∫•m c√¥ng th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

module.exports = { getAllAttendances, getAttendanceByEmployee, createAttendance, updateAttendance, deleteAttendance };
