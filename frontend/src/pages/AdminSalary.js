import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Swal from 'sweetalert2';
import '../styles/Salary.css';

const AdminSalary = () => {
  const [salaries, setSalaries] = useState([]);
  const [employees, setEmployees] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [formData, setFormData] = useState({ employeeId: '', month: '', year: '', baseSalary: '', bonus: '' });
  const [editingSalaryId, setEditingSalaryId] = useState(null);
  //x·∫øp ng√†y tƒÉng d·∫ßn trong b·∫£ng l∆∞∆°ng
  const sortedSalaries = [...salaries].sort((a, b) => new Date(a.paymentDate) - new Date(b.paymentDate));
  const navigate = useNavigate();
  const token = localStorage.getItem('token');

  //b·∫£ng l∆∞∆°ng tham kh·∫£o m√†u m√® hoa l√°
  const defaultSalaries = [
    { position: 'Intern (Th·ª±c t·∫≠p sinh)', salary: '3 - 7 tri·ªáu', note: 'Tr·ª£ c·∫•p, c√≥ th·ªÉ cao h∆°n n·∫øu l√†m nhi·ªÅu.' },
    { position: 'Fresher (D∆∞·ªõi 1 nƒÉm KN)', salary: '8 - 15 tri·ªáu', note: 'M·ªõi ra tr∆∞·ªùng, h·ªçc nhanh, code ·ªïn l√† ƒë∆∞·ª£c.' },
    { position: 'Junior (1-3 nƒÉm KN)', salary: '15 - 25 tri·ªáu', note: 'C√≥ th·ªÉ t·ª± l√†m task, ch∆∞a ƒë·ªß lead team.' },
    { position: 'Middle (3-5 nƒÉm KN)', salary: '25 - 40 tri·ªáu', note: 'L√†m ch·ªß d·ª± √°n nh·ªè, mentor junior.' },
    { position: 'Senior (5+ nƒÉm KN)', salary: '40 - 70 tri·ªáu', note: 'Thi·∫øt k·∫ø h·ªá th·ªëng, t·ªëi ∆∞u code.' },
    { position: 'Tech Lead', salary: '60 - 100 tri·ªáu', note: 'ƒê·ªãnh h∆∞·ªõng c√¥ng ngh·ªá, code √≠t nh∆∞ng ch·∫•t.' },
    { position: 'Solution Architect', salary: '80 - 150 tri·ªáu', note: 'Thi·∫øt k·∫ø h·ªá th·ªëng l·ªõn, l√†m vi·ªác v·ªõi KH.' },
    { position: 'CTO (Gi√°m ƒë·ªëc c√¥ng ngh·ªá)', salary: '100 - 250 tri·ªáu', note: 'T∆∞ duy chi·∫øn l∆∞·ª£c, ƒë·ªãnh h∆∞·ªõng cty.' },
  ];
  //l∆∞u c√°i b·∫£ng l∆∞∆°ng tham kh·∫£o m√†u m√® v√†o local
  const [salaryGuide, setSalaryGuide] = useState(() => {
    const savedData = localStorage.getItem('salaryGuide');
    return savedData ? JSON.parse(savedData) : defaultSalaries;
  });

  //  L∆∞u v√†o LocalStorage khi c√≥ ch·ªânh s·ª≠a
  useEffect(() => {
    localStorage.setItem('salaryGuide', JSON.stringify(salaryGuide));
  }, [salaryGuide]);

  //  H√†m c·∫≠p nh·∫≠t khi admin ch·ªânh s·ª≠a text
  const handleEditGuide = (index, field, value) => {
    const updatedSalaries = [...salaryGuide];
    updatedSalaries[index][field] = value;
    setSalaryGuide(updatedSalaries);
  };

  useEffect(() => {
    const fetchSalaries = async () => {
      try {
        const response = await axios.get('http://localhost:9999/api/payroll/all', { headers: { Authorization: `Bearer ${token}` } });
        setSalaries(response.data);
        console.log('D·ªØ li·ªáu l∆∞∆°ng:', response.data);
      } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch l∆∞∆°ng:', error);
      }
    };

    const fetchEmployees = async () => {
      try {
        const response = await axios.get('http://localhost:9999/api/employees', { headers: { Authorization: `Bearer ${token}` } });
        setEmployees(response.data);
      } catch (error) {
        console.error('‚ùå L·ªói khi l·∫•y danh s√°ch nh√¢n vi√™n:', error);
      }
    };

    fetchSalaries();
    fetchEmployees();
  }, [token]);

  const handleDelete = async (id) => {
    Swal.fire({
      title: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a?',
      text: 'H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'X√≥a',
      cancelButtonText: 'H·ªßy',
    }).then(async (result) => {
      if (result.isConfirmed) {
        try {
          await axios.delete(`http://localhost:9999/api/payroll/delete/${id}`, { headers: { Authorization: `Bearer ${token}` } });
          setSalaries(salaries.filter((salary) => salary._id !== id));
          Swal.fire('ƒê√£ x√≥a!', 'D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a.', 'success');
        } catch (error) {
          Swal.fire('L·ªói!', 'Kh√¥ng th·ªÉ x√≥a l∆∞∆°ng.', 'error');
          console.error('‚ùå L·ªói khi x√≥a l∆∞∆°ng:', error);
        }
      }
    });
  };

  const handleEdit = (salary) => {
    setEditingSalaryId(salary._id);
    setFormData({
      employeeId: salary.employeeId,
      month: salary.month,
      year: salary.year,
      baseSalary: salary.baseSalary,
      bonus: salary.bonus,
      deductions: salary.deductions,
    });
    setShowModal(true);
  };

  const handleCreate = () => {
    setEditingSalaryId(null);
    setFormData({ employeeId: '', month: '', year: '', baseSalary: '', bonus: '' });
    setShowModal(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!formData.day || !formData.month || !formData.year) {
      return Swal.fire('L·ªói!', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ng√†y, th√°ng v√† nƒÉm!', 'error');
    }
    // T·∫°o paymentDate t·ª´ ng√†y/th√°ng/nƒÉm
    const paymentDate = new Date(formData.year, formData.month - 1, formData.day).toISOString();

    try {
      if (editingSalaryId) {
        await axios.put(
          `http://localhost:9999/api/payroll/update/${editingSalaryId}`,
          { ...formData, paymentDate }, // Th√™m paymentDate v√†o payload g·ª≠i ƒëi
          { headers: { Authorization: `Bearer ${token}` } },
        );
        Swal.fire('Th√†nh c√¥ng!', 'C·∫≠p nh·∫≠t l∆∞∆°ng th√†nh c√¥ng!', 'success');
      } else {
        await axios.post(
          'http://localhost:9999/api/payroll/create',
          { ...formData, paymentDate }, // Th√™m paymentDate v√†o payload g·ª≠i ƒëi
          { headers: { Authorization: `Bearer ${token}` } },
        );
        Swal.fire('Th√†nh c√¥ng!', 'Th√™m m·ªõi l∆∞∆°ng th√†nh c√¥ng!', 'success');
      }

      setShowModal(false);
      window.location.reload();
    } catch (error) {
      Swal.fire('L·ªói!', 'Kh√¥ng th·ªÉ l∆∞u d·ªØ li·ªáu.', 'error');
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t l∆∞∆°ng:', error);
    }
  };

  return (
    <div className="admin-salary-page">
      {/* üîô N√∫t Back Home */}
      <div className="back-home-container">
        <span className="back-home" onClick={() => navigate('/dashboard')}>
          ‚¨ÖÔ∏è Back Home
        </span>
      </div>

      <h1>Qu·∫£n L√Ω L∆∞∆°ng</h1>

      <div className="salary-guide-container">
        <h2>B·∫£ng l∆∞∆°ng tham kh·∫£o</h2>
        <table className="salary-guide-table">
          <thead>
            <tr>
              <th>V·ªã tr√≠</th>
              <th>L∆∞∆°ng (VNƒê/th√°ng)</th>
              <th>Ghi ch√∫</th>
            </tr>
          </thead>
          <tbody>
            {salaryGuide.map((item, index) => (
              <tr key={index}>
                <td contentEditable="true" onBlur={(e) => handleEditGuide(index, 'position', e.target.innerText)}>
                  {item.position}
                </td>
                <td contentEditable="true" onBlur={(e) => handleEditGuide(index, 'salary', e.target.innerText)}>
                  {item.salary}
                </td>
                <td contentEditable="true" onBlur={(e) => handleEditGuide(index, 'note', e.target.innerText)}>
                  {item.note}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* N√∫t Th√™m L∆∞∆°ng */}
      <div className="add-btn-container">
        <button className="add-btn" onClick={handleCreate}>
          Th√™m L∆∞∆°ng Cho Nh√¢n Vi√™n ‚ûï
        </button>
      </div>

      {salaries.length > 0 ? (
        <table className="salary-table">
          <thead>
            <tr>
              <th>Nh√¢n Vi√™n</th>
              <th>Ng√†y</th>
              <th>Th√°ng</th>
              <th>NƒÉm</th>
              <th>L∆∞∆°ng C∆° B·∫£n</th>
              <th>Th∆∞·ªüng</th>
              <th>Ph·∫°t</th>
              <th>T·ªïng L∆∞∆°ng</th>
              <th colSpan="2">H√†nh ƒë·ªông</th>
            </tr>
          </thead>
          <tbody>
            {sortedSalaries.map((salary) => {
              const employee = employees.find((emp) => emp._id === salary.employeeId);
              return (
                <tr key={salary._id}>
                  <td>{salary.employeeId ? `${salary.employeeId.firstName} ${salary.employeeId.lastName}` : 'Kh√¥ng x√°c ƒë·ªãnh'}</td>
                  <td>{new Date(salary.paymentDate).getDate()}</td>
                  <td>{new Date(salary.paymentDate).getMonth() + 1}</td>
                  <td>{new Date(salary.paymentDate).getFullYear()}</td>
                  <td>{salary.baseSalary ? salary.baseSalary.toLocaleString('vi-VN') : 'Ch∆∞a c·∫≠p nh·∫≠t'} VNƒê</td>
                  <td>{salary.bonus ? salary.bonus.toLocaleString('vi-VN') : 'Ch∆∞a c·∫≠p nh·∫≠t'} VNƒê</td>
                  <td>{salary.deductions ? `- ${salary.deductions.toLocaleString('vi-VN')}` : '0'} VNƒê</td>
                  <td>{salary.total ? salary.total.toLocaleString('vi-VN') : 'Ch∆∞a c·∫≠p nh·∫≠t'} VNƒê</td>
                  <td>
                    <button className="edit-btn" onClick={() => handleEdit(salary)}>
                      S·ª≠a
                    </button>
                  </td>
                  <td>
                    <button className="delete-btn" onClick={() => handleDelete(salary._id)}>
                      X√≥a
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      ) : (
        <p>Kh√¥ng c√≥ d·ªØ li·ªáu l∆∞∆°ng.</p>
      )}

      {/* üìù Modal Form */}
      {showModal && (
        <div className="modal">
          <form className="salary-form" onSubmit={handleSubmit}>
            <label>Nh√¢n Vi√™n</label>
            <select value={formData.employeeId} onChange={(e) => setFormData({ ...formData, employeeId: e.target.value })} required>
              <option value="">Ch·ªçn nh√¢n vi√™n</option>
              {employees.map((emp) => (
                <option key={emp._id} value={emp._id}>
                  {emp.firstName} {emp.lastName}
                </option>
              ))}
            </select>
            <label>Ng√†y</label>
            <input type="number" value={formData.day} onChange={(e) => setFormData({ ...formData, day: e.target.value })} />

            <label>Th√°ng</label>
            <input type="number" value={formData.month} onChange={(e) => setFormData({ ...formData, month: e.target.value })} />

            <label>NƒÉm</label>
            <input type="number" value={formData.year} onChange={(e) => setFormData({ ...formData, year: e.target.value })} />

            <label>L∆∞∆°ng C∆° B·∫£n</label>
            <input type="number" value={formData.baseSalary} onChange={(e) => setFormData({ ...formData, baseSalary: e.target.value })} required />

            <label>Th∆∞·ªüng</label>
            <input type="number" value={formData.bonus} onChange={(e) => setFormData({ ...formData, bonus: e.target.value })} required />

            <label>Ti·ªÅn Ph·∫°t</label>
            <input type="number" value={formData.deductions} onChange={(e) => setFormData({ ...formData, deductions: e.target.value })} required />

            <button type="submit">{editingSalaryId ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}</button>
            <button type="button" onClick={() => setShowModal(false)}>
              H·ªßy
            </button>
          </form>
        </div>
      )}
    </div>
  );
};

export default AdminSalary;
